Index: .idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1738681755913)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09_[Changes]/shelved.patch	(date 1738681755913)
@@ -0,0 +1,190 @@
+Index: main.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+># import relatorio\r\n\r\nfrom src.rf.parte1.parte1_rf1 import listar_times_conferencia\r\nfrom src.rf.parte1.parte1_rf2 import apresentar_classificacao_atual\r\nfrom src.rf.parte1.parte1_rf3 import calcular_vitorias_derrotas_por_temporada\r\nfrom src.rf.parte1.parte1_rf4 import calcular_totais_do_time\r\nfrom src.rf.parte1.parte1_rf5 import apresentar_dados_divididos\r\nfrom src.rf.parte1.parte1_rf6 import apresentar_performance_defensiva\r\nfrom src.rf.parte1.parte1_rf7 import apresentar_jogos_do_time\r\nfrom src.rf.parte1.parte1_rf8 import rf_graficos_desempenho_brooklyn_nets\r\nfrom src.rf.parte2.parte2_rf1 import apresentar_dados_jogadores\r\nfrom src.rf.parte2.parte2_rf2 import apresentar_dados_partidas_time_por_id\r\nfrom src.rf.parte2.parte2_rf3 import apresentar_dados_partidas_contra_time\r\nfrom src.rf.parte2.parte2_rf4 import apresentar_dados_jogos_casa_fora\r\nfrom src.rf.parte2.parte2_rf5 import calcular_e_apresentar_medias\r\nfrom src.rf.parte2.parte2_rf6 import calcular_e_apresentar_medianas\r\nfrom src.rf.parte2.parte2_rf7 import calcular_e_apresentar_modas\r\nfrom src.rf.parte2.parte2_rf8 import calcular_e_apresentar_desvios\r\nfrom src.rf.parte2.parte2_rf9 import apresentar_totais_carreira\r\nfrom src.rf.parte2.parte2_rf10 import comparar_estatisticas\r\nfrom src.data.limpeza_dados import tratar_dados_jogadores, adicionar_informacoes_placar\r\nfrom src.data.coleta_dados import coletar_dados_time\r\n\r\nimport pandas as pd\r\nimport os\r\nimport pdfkit\r\n\r\n# Configurações do projeto\r\nteam_id = 1610612751  # ID do Brooklyn Nets\r\nteam_abbr = \"BRK\"  # Abreviação do Brooklyn Nets\r\nseasons = [\"2023-24\", \"2024-25\"]\r\noutput_dir = \"reports/arquivos_csv\"\r\nhtml_dir = \"reports/html\"\r\nimg_dir = \"reports/imagens\"\r\n\r\n# Criar diretórios de saída\r\nos.makedirs(output_dir, exist_ok=True)\r\nos.makedirs(html_dir, exist_ok=True)\r\nos.makedirs(img_dir, exist_ok=True)\r\n\r\nplayer_names = [\"Cam Thomas\", \"Cameron Johnson\", \"D'Angelo Russell\"]\r\n\r\nplayers = [\r\n    {'PLAYER': 'Cam Thomas', 'PLAYER_ID': 1630560},\r\n    {'PLAYER': 'Cameron Johnson', 'PLAYER_ID': 1629661},\r\n    {'PLAYER': 'D\\'Angelo Russell', 'PLAYER_ID': 1626156}\r\n]\r\n\r\n# Parte 01 RF1: Listar times por conferência\r\nprint(\"Executando RF1: Listar times por conferência...\")\r\nlistar_times_conferencia(\"reports/imagens/parte1/parte1\", \"reports/html/parte1\", \"reports/imagens/parte1\")\r\n\r\n# Parte 01 RF2: Apresentar classificação atual\r\nprint(\"Executando RF2: Apresentar classificação atual dos times...\")\r\napresentar_classificacao_atual(\"reports/imagens/parte1/parte1\", \"reports/html/parte1\", \"reports/imagens/parte1\")\r\n\r\n# Parte 01 RF3: Calcular vitórias e derrotas\r\nprint(\"Executando RF3: Calcular vitórias e derrotas do time...\")\r\ncalcular_vitorias_derrotas_por_temporada(team_id, seasons, \"reports/imagens/parte1/parte1\", \"reports/imagens/parte1\")\r\n\r\n# Parte 01 RF4: Calcular totais do time\r\nprint(\"Executando RF4: Calcular totais do time por temporada...\")\r\ncalcular_totais_do_time(team_id, seasons, \"reports/imagens/parte1/parte1\", \"reports/html/parte1\", \"reports/imagens/parte1\")\r\n\r\n# Parte 01 RF5: Apresentar divisão de dados do time\r\nprint(\"Executando RF5: Divisão de dados do time...\")\r\napresentar_dados_divididos(\r\n    team_id=team_id,\r\n    seasons=seasons,\r\n    output_dir=\"reports/imagens/parte1/parte1\",\r\n    html_dir=\"reports/html/parte1\",\r\n    img_dir=\"reports/imagens/parte1\"\r\n)\r\n\r\n# Parte 01 RF6: Apresentar os dados referentes a performance defensiva do time\r\nprint(\"Executando RF6: Performance defensiva do time...\")\r\napresentar_performance_defensiva(\r\n    team_id=1610612751,\r\n    seasons=[\"2023-24\", \"2024-25\"],\r\n    output_dir=\"reports/imagens/parte1/parte1\",\r\n    html_dir=\"reports/html/parte1\",\r\n    img_dir=\"reports/imagens/parte1\"\r\n)\r\n\r\n# Parte 01 RF7: Apresentar jogos do Time\r\nprint(\"Executando RF7: Apresentar jogos do time...\")\r\n\r\n# Diretório base para saída\r\nbase_output_dir = \"reports/imagens/parte1\"\r\n\r\n# Executar o RF7 e salvar os resultados\r\ndados_nets = apresentar_jogos_do_time(team_abbr, seasons, base_output_dir)\r\n\r\n# Exibir as primeiras linhas do DataFrame processado\r\nprint(\"Dados do RF7 processados:\")\r\nprint(dados_nets.head())\r\n\r\n# Parte 1 RF8: Gráficos de desempenho do Brooklyn Nets\r\nprint(\"Executando RF8: Gerar gráficos de desempenho do Brooklyn Nets...\")\r\n\r\n# Chamada da função para gerar gráficos usando a API\r\nrf_graficos_desempenho_brooklyn_nets(\r\n    team_id=1610612751,  # ID do Brooklyn Nets\r\n    seasons=[\"2023-24\", \"2024-25\"],  # Temporadas para coletar dados\r\n    output_dir=\"reports/graficos/parte1\"  # Diretório para salvar os gráficos gerados\r\n)\r\n\r\nprint(\"RF8 concluído: Gráficos gerados com sucesso.\")\r\n\r\n# Parte 2, RF1: Apresentar os dados dos Jogadores\r\nprint(\"Executando P2-RF1: Apresentar dados dos jogadores...\")\r\napresentar_dados_jogadores(\r\n    player_names, \r\n    output_dir=\"reports/arquivos_csv/parte2/parte2-rf1\",\r\n    html_dir=\"reports/html/parte2/parte2-rf1\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf1\"\r\n)\r\n\r\n# Parte 2, RF2: Apresentar os dados de cada jogador do time\r\nprint(\"Executando P2-RF2: Apresentar dados de cada jogador do time...\")\r\napresentar_dados_partidas_time_por_id(\r\n    team_id, \r\n    output_dir=\"reports/arquivos_csv/parte2/parte2-rf2\", \r\n    html_dir=\"reports/html/parte2/parte2-rf2\", \r\n    img_dir=\"reports/imagens/parte2/parte2-rf2\"\r\n)\r\n\r\n# Parte 2, RF3: Fornecer dados da partida contra time que o usuário escolher\r\nprint(\"Executando P2-RF3: Apresentar dados da partida contra o time selecionado...\")\r\napresentar_dados_partidas_contra_time(\r\n    opponent_abbr=\"LAL\",\r\n    output_dir=\"reports/arquivos_csv/parte2/parte2-rf3\",\r\n    html_dir=\"reports/html/parte2/parte2-rf3\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf3\"\r\n)\r\n\r\n# Parte 2, RF4: Apresentar a quantidade de jogos realizados dentro e fora de casa e a quantidade de jogos dentro e fora de casa contra um determinado time [da escolha do  usuário]. \r\nprint(\"Executando P2-RF4: Apresentando jogos dentro e fora de casa dos jogadores e contra um time selecionado...\")\r\napresentar_dados_jogos_casa_fora(\r\n    opponent_abbr=\"PHI\",\r\n    output_dir=\"reports/arquivos_csv/parte2/parte2-rf4\",\r\n    html_dir=\"reports/html/parte2/parte2-rf4\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf4\"\r\n)\r\n\r\n# Parte 2, RF5: Apresentar e calcular a média de pontos, rebotes e assistências dos jogadores\r\n# Parte 2, RF5-A: Apresentar ao usuário a porcentagem de pontos, rebotes e assistências abaixo da média  \r\nprint(\"Executando P2-RF5: Apresentando e calculando média de pontos, rebotes e assistências dos jogadores, e também as porcentagens abaixo da média...\")\r\ncalcular_e_apresentar_medias(\r\n    players, \r\n    output_dir = \"reports/arquivos_csv/parte2/parte2-rf5\",\r\n    html_dir=\"reports/html/parte2/parte2-rf5\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf5\"\r\n)\r\n\r\n# Parte 2, RF6: Apresentar e calcular a mediana de pontos, rebotes e assistências dos jogadores. \r\n# Parte 2, RF6-A: Apresentar ao usuário a porcentagem de pontos, rebotes e assistências abaixo da mediana  \r\nprint(\"Executando P2-RF6: Apresentando e calculando mediana de pontos, rebotes e assistências dos jogadores, e também as porcentagens abaixo da mediana...\")\r\ncalcular_e_apresentar_medianas(\r\n    players, \r\n    output_dir = \"reports/arquivos_csv/parte2/parte2-rf6\",\r\n    html_dir=\"reports/html/parte2/parte2-rf6\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf6\"\r\n)\r\n\r\n# Parte2, RF7: Apresentar e calcular a moda de pontos, rebotes e assistências dos jogadores. Exibir a quantidade de vezes que a moda aparece para cada item. \r\n# Parte2, RF7-A: Apresentar ao usuário a porcentagem de pontos, rebotes e assistências abaixo da média.\r\nprint(\"Executando P2-RF7: Apresentando e calculando moda de pontos, rebotes e assistências dos jogadores, e também as porcentagens abaixo da média...\")\r\ncalcular_e_apresentar_modas(\r\n    players,\r\n    output_dir = \"reports/arquivos_csv/parte2/parte2-rf7\",\r\n    html_dir=\"reports/html/parte2/parte2-rf7\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf7\"\r\n)\r\n\r\n# Parte2, RF8: Apresentar o Desvio Padrão de pontos, rebotes e assistências dos jogadores.  Quanto mais próximo de zero, mais agrupado em torno da média os dados estão. \r\nprint(\"Executando P2-RF8: Apresentar o Desvio Padrão de pontos, rebotes e assistências dos jogadores...\")\r\ncalcular_e_apresentar_desvios(\r\n    players,\r\n    output_dir = \"reports/arquivos_csv/parte2/parte2-rf8\",\r\n    html_dir=\"reports/html/parte2/parte2-rf8\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf8\"\r\n)\r\n\r\n# Parte2, RF9: O sistema deve apresentar a quantidade de pontos, assistências e rebotes de toda a  carreira do jogador. \r\nprint(\"Executando P2-RF9: Apresentando a quantidade de pontos, assistências e rebotes de toda a carreira dos jogadores... \")\r\napresentar_totais_carreira(\r\n    players,\r\n    output_dir = \"reports/arquivos_csv/parte2/parte2-rf9\",\r\n    html_dir=\"reports/html/parte2/parte2-rf9\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf9\"\r\n)\r\n\r\n# Parte 2, RF10: O sistema deve apresentar a quantidade de pontos, assistências e rebotes de toda a carreira do jogador e comparada com a atual temporada.\r\n# Parte 2, RF10-A: Apresentar gráficos de desempenho dos seus jogadores [temporada atual] para compor o Dashboard do projeto.\r\nprint(\"Executando P2-RF10: Apresentando a quantidade de pontos, assistências e rebotes de toda a carreira dos jogadores e comparando com a atual, e gerando os gráficos para o Dashboard... \")\r\ncomparar_estatisticas(\r\n    players,\r\n    output_dir=\"reports/arquivos_csv/parte2/parte2-rf10\",\r\n    html_dir=\"reports/html/parte2/parte2-rf10\",\r\n    img_dir=\"reports/imagens/parte2/parte2-rf10\"\r\n)\r\n\r\nprint(\"Processamento concluído.\")
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/main.py b/main.py
+--- a/main.py	(revision 9deeec04d6ed4bf31d2dec1b8a60dfd6a5317c84)
++++ b/main.py	(date 1738680051048)
+@@ -102,7 +102,7 @@
+ rf_graficos_desempenho_brooklyn_nets(
+     team_id=1610612751,  # ID do Brooklyn Nets
+     seasons=["2023-24", "2024-25"],  # Temporadas para coletar dados
+-    output_dir="reports/graficos/parte1"  # Diretório para salvar os gráficos gerados
++    html_output_dir="reports/html/parte1"  # Diretório para salvar os gráficos gerados
+ )
+ 
+ print("RF8 concluído: Gráficos gerados com sucesso.")
+Index: src/rf/parte1/parte1_rf8.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>import os\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom nba_api.stats.endpoints import teamgamelog\r\n\r\ndef rf_graficos_desempenho_brooklyn_nets(team_id=1610612751, seasons=[\"2023-24\", \"2024-25\"], output_dir=\"reports/graficos/parte1\", csv_output_dir=\"reports/arquivos_csv/parte1/graficos_csv\"):\r\n    os.makedirs(output_dir, exist_ok=True)\r\n    os.makedirs(csv_output_dir, exist_ok=True)\r\n\r\n    def coletar_dados_temporada(team_id, season):\r\n        print(f\"Coletando dados para a temporada {season}...\")\r\n        game_log = teamgamelog.TeamGameLog(team_id=team_id, season=season).get_data_frames()[0]\r\n        game_log[\"SEASON\"] = season  # Adicionar a coluna da temporada\r\n        return game_log\r\n\r\n    all_seasons_data = pd.concat([coletar_dados_temporada(team_id, season) for season in seasons], ignore_index=True)\r\n\r\n    # Correção da coluna PTS_PA para evitar desalinhamento de dados\r\n    all_seasons_data = all_seasons_data.sort_values(by=[\"SEASON\", \"Game_ID\"], ascending=[True, False])\r\n    all_seasons_data[\"PTS_PA\"] = all_seasons_data[\"PTS\"].shift(-1)\r\n    all_seasons_data[\"PTS_PA\"] = all_seasons_data[\"PTS_PA\"].fillna(all_seasons_data[\"PTS\"].mean())\r\n\r\n    all_seasons_data[\"WINS\"] = all_seasons_data[\"WL\"].apply(lambda x: 1 if x == \"W\" else 0)\r\n    all_seasons_data[\"LOSSES\"] = all_seasons_data[\"WL\"].apply(lambda x: 1 if x == \"L\" else 0)\r\n    all_seasons_data[\"HOME_GAME\"] = all_seasons_data[\"MATCHUP\"].apply(lambda x: \"vs\" in x)\r\n\r\n    # 1. Gráfico de Barras Empilhado\r\n    print(\"Gerando Gráfico de Barras Empilhado...\")\r\n    wins_losses = all_seasons_data.groupby(\"SEASON\").agg(\r\n        total_wins=(\"WINS\", \"sum\"),\r\n        total_losses=(\"LOSSES\", \"sum\"),\r\n    ).reset_index()\r\n\r\n    fig, ax = plt.subplots(figsize=(12, 6))\r\n    x = np.arange(len(wins_losses[\"SEASON\"]))\r\n    ax.bar(x, wins_losses[\"total_wins\"], label=\"Vitórias\", color=\"green\")\r\n    ax.bar(x, wins_losses[\"total_losses\"], bottom=wins_losses[\"total_wins\"], label=\"Derrotas\", color=\"red\")\r\n\r\n    ax.set_xlabel(\"Temporada\")\r\n    ax.set_ylabel(\"Número de Jogos\")\r\n    ax.set_title(\"Vitórias e Derrotas (Empilhado)\")\r\n    ax.set_xticks(x)\r\n    ax.set_xticklabels(wins_losses[\"SEASON\"])\r\n    ax.legend()\r\n\r\n    barras_empilhado_path = os.path.join(output_dir, \"barras_empilhado_vitorias_derrotas.png\")\r\n    plt.tight_layout()\r\n    plt.savefig(barras_empilhado_path)\r\n    plt.close()\r\n    print(f\"Gráfico de Barras Empilhado salvo em {barras_empilhado_path}\")\r\n\r\n    # Salvar CSV do Gráfico de Barras Empilhado\r\n    barras_empilhado_csv_path = os.path.join(csv_output_dir, \"barras_empilhado_vitorias_derrotas.csv\")\r\n    wins_losses.to_csv(barras_empilhado_csv_path, index=False)\r\n    print(f\"CSV do Gráfico de Barras Empilhado salvo em {barras_empilhado_csv_path}\")\r\n\r\n    # 2. Gráficos de Pizza\r\n    print(\"Gerando Gráficos de Pizza...\")\r\n    for season in seasons:\r\n        season_data = all_seasons_data[all_seasons_data[\"SEASON\"] == season]\r\n        total_home_wins = season_data.loc[season_data[\"HOME_GAME\"], \"WINS\"].sum()\r\n        total_away_wins = season_data.loc[~season_data[\"HOME_GAME\"], \"WINS\"].sum()\r\n        total_home_losses = season_data.loc[season_data[\"HOME_GAME\"], \"LOSSES\"].sum()\r\n        total_away_losses = season_data.loc[~season_data[\"HOME_GAME\"], \"LOSSES\"].sum()\r\n\r\n        labels = [\"Vitórias em Casa\", \"Vitórias Fora\", \"Derrotas em Casa\", \"Derrotas Fora\"]\r\n        values = [total_home_wins, total_away_wins, total_home_losses, total_away_losses]\r\n        colors = [\"green\", \"blue\", \"red\", \"brown\"]\r\n\r\n        fig, ax = plt.subplots(figsize=(8, 8))\r\n        ax.pie(values, labels=labels, autopct=\"%1.1f%%\", startangle=90, colors=colors)\r\n        ax.set_title(f\"Percentual de Vitórias e Derrotas ({season})\")\r\n\r\n        pizza_path = os.path.join(output_dir, f\"pizza_vitorias_derrotas_{season}.png\")\r\n        plt.savefig(pizza_path)\r\n        plt.close()\r\n        print(f\"Gráfico de Pizza salvo para a temporada {season} em {pizza_path}\")\r\n\r\n        # Salvar CSV do Gráfico de Pizza\r\n        pizza_csv_data = pd.DataFrame({\r\n            \"Categoria\": labels,\r\n            \"Frequência\": values\r\n        })\r\n        pizza_csv_path = os.path.join(csv_output_dir, f\"grafico_pizza_{season}.csv\")\r\n        pizza_csv_data.to_csv(pizza_csv_path, index=False)\r\n        print(f\"CSV do Gráfico de Pizza ({season}) salvo em {pizza_csv_path}\")\r\n\r\n    # 3. Gráfico de Radar\r\n    print(\"Gerando Gráfico de Radar...\")\r\n    radar_data = all_seasons_data.groupby(\"HOME_GAME\").agg(\r\n        avg_points=(\"PTS\", \"mean\"),\r\n        avg_points_allowed=(\"PTS_PA\", \"mean\"),\r\n    ).reset_index()\r\n\r\n    if radar_data.empty or radar_data.isnull().values.any():\r\n        print(\"Erro: Dados insuficientes ou inconsistentes para criar o gráfico de radar.\")\r\n        return\r\n\r\n    categories = [\"Pontos Marcados\", \"Pontos Sofridos\"]\r\n    values_home = radar_data[radar_data[\"HOME_GAME\"] == True][[\"avg_points\", \"avg_points_allowed\"]].values.flatten().tolist()\r\n    values_away = radar_data[radar_data[\"HOME_GAME\"] == False][[\"avg_points\", \"avg_points_allowed\"]].values.flatten().tolist()\r\n\r\n    values_home += values_home[:1]\r\n    values_away += values_away[:1]\r\n    angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()\r\n    angles += angles[:1]\r\n\r\n    fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\r\n    ax.plot(angles, values_home, label=\"Casa\", color=\"green\", linewidth=2)\r\n    ax.fill(angles, values_home, color=\"green\", alpha=0.25)\r\n    ax.plot(angles, values_away, label=\"Fora\", color=\"blue\", linewidth=2)\r\n    ax.fill(angles, values_away, color=\"blue\", alpha=0.25)\r\n\r\n    ax.set_title(\"Média de Pontos Marcados e Sofridos (Casa e Fora)\", size=15, weight=\"bold\", pad=20)\r\n    ax.set_yticks([])\r\n    ax.set_xticks(angles[:-1])\r\n    ax.set_xticklabels(categories, fontsize=12)\r\n    ax.legend(loc=\"upper right\", bbox_to_anchor=(1.1, 1.1))\r\n\r\n    radar_path = os.path.join(output_dir, \"grafico_radar_pontos.png\")\r\n    plt.savefig(radar_path)\r\n    plt.close()\r\n    print(f\"Gráfico de Radar salvo em {radar_path}\")\r\n\r\n    # Salvar CSV do Gráfico de Radar\r\n    radar_csv_path = os.path.join(csv_output_dir, \"grafico_radar_pontos.csv\")\r\n    radar_data.to_csv(radar_csv_path, index=False)\r\n    print(f\"CSV do Gráfico de Radar salvo em {radar_csv_path}\")\r\n\r\n    print(\"Todos os gráficos e arquivos CSV foram gerados com sucesso!\")
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/rf/parte1/parte1_rf8.py b/src/rf/parte1/parte1_rf8.py
+--- a/src/rf/parte1/parte1_rf8.py	(revision 9deeec04d6ed4bf31d2dec1b8a60dfd6a5317c84)
++++ b/src/rf/parte1/parte1_rf8.py	(date 1738680963120)
+@@ -1,22 +1,27 @@
+ import os
+-import matplotlib.pyplot as plt
+-import numpy as np
++import plotly.graph_objects as go
+ import pandas as pd
+ from nba_api.stats.endpoints import teamgamelog
+ 
+-def rf_graficos_desempenho_brooklyn_nets(team_id=1610612751, seasons=["2023-24", "2024-25"], output_dir="reports/graficos/parte1", csv_output_dir="reports/arquivos_csv/parte1/graficos_csv"):
+-    os.makedirs(output_dir, exist_ok=True)
++def rf_graficos_desempenho_brooklyn_nets(
++        team_id=1610612751,
++        seasons=["2023-24", "2024-25"],
++        html_output_dir="reports/html/parte1",
++        csv_output_dir="reports/arquivos_csv/parte1",
++        img_output_dir="reports/imagens/parte1"
++):
++    os.makedirs(html_output_dir, exist_ok=True)
+     os.makedirs(csv_output_dir, exist_ok=True)
++    os.makedirs(img_output_dir, exist_ok=True)
+ 
+     def coletar_dados_temporada(team_id, season):
+         print(f"Coletando dados para a temporada {season}...")
+         game_log = teamgamelog.TeamGameLog(team_id=team_id, season=season).get_data_frames()[0]
+-        game_log["SEASON"] = season  # Adicionar a coluna da temporada
++        game_log["SEASON"] = season
+         return game_log
+ 
+     all_seasons_data = pd.concat([coletar_dados_temporada(team_id, season) for season in seasons], ignore_index=True)
+ 
+-    # Correção da coluna PTS_PA para evitar desalinhamento de dados
+     all_seasons_data = all_seasons_data.sort_values(by=["SEASON", "Game_ID"], ascending=[True, False])
+     all_seasons_data["PTS_PA"] = all_seasons_data["PTS"].shift(-1)
+     all_seasons_data["PTS_PA"] = all_seasons_data["PTS_PA"].fillna(all_seasons_data["PTS"].mean())
+@@ -32,28 +37,22 @@
+         total_losses=("LOSSES", "sum"),
+     ).reset_index()
+ 
+-    fig, ax = plt.subplots(figsize=(12, 6))
+-    x = np.arange(len(wins_losses["SEASON"]))
+-    ax.bar(x, wins_losses["total_wins"], label="Vitórias", color="green")
+-    ax.bar(x, wins_losses["total_losses"], bottom=wins_losses["total_wins"], label="Derrotas", color="red")
++    fig = go.Figure()
++    fig.add_trace(go.Bar(x=wins_losses["SEASON"], y=wins_losses["total_wins"], name="Vitórias", marker_color="green"))
++    fig.add_trace(go.Bar(x=wins_losses["SEASON"], y=wins_losses["total_losses"], name="Derrotas", marker_color="red"))
+ 
+-    ax.set_xlabel("Temporada")
+-    ax.set_ylabel("Número de Jogos")
+-    ax.set_title("Vitórias e Derrotas (Empilhado)")
+-    ax.set_xticks(x)
+-    ax.set_xticklabels(wins_losses["SEASON"])
+-    ax.legend()
++    fig.update_layout(title="Vitórias e Derrotas (Empilhado)", xaxis_title="Temporada", yaxis_title="Número de Jogos", barmode="stack")
+ 
+-    barras_empilhado_path = os.path.join(output_dir, "barras_empilhado_vitorias_derrotas.png")
+-    plt.tight_layout()
+-    plt.savefig(barras_empilhado_path)
+-    plt.close()
+-    print(f"Gráfico de Barras Empilhado salvo em {barras_empilhado_path}")
++    barras_html_path = os.path.join(html_output_dir, "rf8_barras_empilhado_vitorias_derrotas.html")
++    barras_img_path = os.path.join(img_output_dir, "rf8_barras_empilhado_vitorias_derrotas.jpg")
++    barras_csv_path = os.path.join(csv_output_dir, "rf8_barras_empilhado_vitorias_derrotas.csv")
+ 
+-    # Salvar CSV do Gráfico de Barras Empilhado
+-    barras_empilhado_csv_path = os.path.join(csv_output_dir, "barras_empilhado_vitorias_derrotas.csv")
+-    wins_losses.to_csv(barras_empilhado_csv_path, index=False)
+-    print(f"CSV do Gráfico de Barras Empilhado salvo em {barras_empilhado_csv_path}")
++    fig.write_html(barras_html_path)
++    fig.write_image(barras_img_path, format="jpg", engine="orca")
++    wins_losses.to_csv(barras_csv_path, index=False)
++
++    print(f"Gráficos salvo em {barras_html_path} e {barras_img_path}")
++    print(f"CSV salvo em {barras_csv_path}")
+ 
+     # 2. Gráficos de Pizza
+     print("Gerando Gráficos de Pizza...")
+@@ -66,25 +65,20 @@
+ 
+         labels = ["Vitórias em Casa", "Vitórias Fora", "Derrotas em Casa", "Derrotas Fora"]
+         values = [total_home_wins, total_away_wins, total_home_losses, total_away_losses]
+-        colors = ["green", "blue", "red", "brown"]
+ 
+-        fig, ax = plt.subplots(figsize=(8, 8))
+-        ax.pie(values, labels=labels, autopct="%1.1f%%", startangle=90, colors=colors)
+-        ax.set_title(f"Percentual de Vitórias e Derrotas ({season})")
++        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.4)])
++        fig.update_layout(title=f"rf8_Percentual de Vitórias e Derrotas ({season})")
+ 
+-        pizza_path = os.path.join(output_dir, f"pizza_vitorias_derrotas_{season}.png")
+-        plt.savefig(pizza_path)
+-        plt.close()
+-        print(f"Gráfico de Pizza salvo para a temporada {season} em {pizza_path}")
++        pizza_html_path = os.path.join(html_output_dir, f"rf8_pizza_vitorias_derrotas_{season}.html")
++        pizza_img_path = os.path.join(img_output_dir, f"rf8_pizza_vitorias_derrotas_{season}.jpg")
++        pizza_csv_path = os.path.join(csv_output_dir, f"rf8_grafico_pizza_{season}.csv")
+ 
+-        # Salvar CSV do Gráfico de Pizza
+-        pizza_csv_data = pd.DataFrame({
+-            "Categoria": labels,
+-            "Frequência": values
+-        })
+-        pizza_csv_path = os.path.join(csv_output_dir, f"grafico_pizza_{season}.csv")
+-        pizza_csv_data.to_csv(pizza_csv_path, index=False)
+-        print(f"CSV do Gráfico de Pizza ({season}) salvo em {pizza_csv_path}")
++        fig.write_html(pizza_html_path)
++        fig.write_image(pizza_img_path, format="jpg", engine="orca")
++        pd.DataFrame({"Categoria": labels, "Frequência": values}).to_csv(pizza_csv_path, index=False)
++
++        print(f"Gráficos salvo para {season} em {pizza_html_path} e {pizza_img_path}")
++        print(f"CSV salvo em {pizza_csv_path}")
+ 
+     # 3. Gráfico de Radar
+     print("Gerando Gráfico de Radar...")
+@@ -101,31 +95,24 @@
+     values_home = radar_data[radar_data["HOME_GAME"] == True][["avg_points", "avg_points_allowed"]].values.flatten().tolist()
+     values_away = radar_data[radar_data["HOME_GAME"] == False][["avg_points", "avg_points_allowed"]].values.flatten().tolist()
+ 
+-    values_home += values_home[:1]
+-    values_away += values_away[:1]
+-    angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()
+-    angles += angles[:1]
++    values_home.append(values_home[0])
++    values_away.append(values_away[0])
+ 
+-    fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))
+-    ax.plot(angles, values_home, label="Casa", color="green", linewidth=2)
+-    ax.fill(angles, values_home, color="green", alpha=0.25)
+-    ax.plot(angles, values_away, label="Fora", color="blue", linewidth=2)
+-    ax.fill(angles, values_away, color="blue", alpha=0.25)
++    fig = go.Figure()
++    fig.add_trace(go.Scatterpolar(r=values_home, theta=categories + [categories[0]], fill="toself", name="Casa", line_color="green"))
++    fig.add_trace(go.Scatterpolar(r=values_away, theta=categories + [categories[0]], fill="toself", name="Fora", line_color="blue"))
+ 
+-    ax.set_title("Média de Pontos Marcados e Sofridos (Casa e Fora)", size=15, weight="bold", pad=20)
+-    ax.set_yticks([])
+-    ax.set_xticks(angles[:-1])
+-    ax.set_xticklabels(categories, fontsize=12)
+-    ax.legend(loc="upper right", bbox_to_anchor=(1.1, 1.1))
++    fig.update_layout(title="Média de Pontos Marcados e Sofridos (Casa e Fora)", polar=dict(radialaxis=dict(visible=True)))
+ 
+-    radar_path = os.path.join(output_dir, "grafico_radar_pontos.png")
+-    plt.savefig(radar_path)
+-    plt.close()
+-    print(f"Gráfico de Radar salvo em {radar_path}")
++    radar_html_path = os.path.join(html_output_dir, "rf8_grafico_radar_pontos.html")
++    radar_img_path = os.path.join(img_output_dir, "rf8_grafico_radar_pontos.jpg")
++    radar_csv_path = os.path.join(csv_output_dir, "rf8_grafico_radar_pontos.csv")
+ 
+-    # Salvar CSV do Gráfico de Radar
+-    radar_csv_path = os.path.join(csv_output_dir, "grafico_radar_pontos.csv")
++    fig.write_html(radar_html_path)
++    fig.write_image(radar_img_path, format="jpg", engine="orca")
+     radar_data.to_csv(radar_csv_path, index=False)
+-    print(f"CSV do Gráfico de Radar salvo em {radar_csv_path}")
+ 
+-    print("Todos os gráficos e arquivos CSV foram gerados com sucesso!")
+\ No newline at end of file
++    print(f"Gráficos salvo em {radar_html_path} e {radar_img_path}")
++    print(f"CSV salvo em {radar_csv_path}")
++
++    print("✅ Todos os gráficos e arquivos CSV foram gerados com sucesso!")
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1738730679819)
+++ b/.idea/workspace.xml	(date 1738730679819)
@@ -0,0 +1,259 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="73705b0c-ca9f-453e-ada2-da743a49b3ab" name="Changes" comment="Finalização da parte 01 com todos os gráficos gerados.">
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09_[Changes]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09__Changes_.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49_[Changes]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49__Changes_.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="DjangoConsoleOptions" custom-start-script="import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)">
+    <option name="myCustomStartScript" value="import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
+  </component>
+  <component name="FlaskConsoleOptions" custom-start-script="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))">
+    <envs>
+      <env key="FLASK_APP" value="app" />
+    </envs>
+    <option name="myCustomStartScript" value="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))" />
+    <option name="myEnvs">
+      <map>
+        <entry key="FLASK_APP" value="app" />
+      </map>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
+  </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;leonardonb&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/leonardonb/cd_nba.git&quot;,
+    &quot;accountId&quot;: &quot;b77ccdd4-a4d9-4cbe-9863-8d7dd8e8552b&quot;
+  }
+}</component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 5
+}</component>
+  <component name="ProjectId" id="2rjitazlZgPiDLgNZB25isl7DEj" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.basico.executor&quot;: &quot;Run&quot;,
+    &quot;Python.coleta_dados.executor&quot;: &quot;Run&quot;,
+    &quot;Python.gerarpdf.executor&quot;: &quot;Run&quot;,
+    &quot;Python.graficos_estatisticas.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;Python.parte1_rf4.executor&quot;: &quot;Run&quot;,
+    &quot;Python.parte1_rf8.executor&quot;: &quot;Run&quot;,
+    &quot;Python.parte2_rf10.executor&quot;: &quot;Run&quot;,
+    &quot;Python.renomear_arquivos.executor&quot;: &quot;Run&quot;,
+    &quot;Python.rf1.executor&quot;: &quot;Run&quot;,
+    &quot;Python.rf2.executor&quot;: &quot;Run&quot;,
+    &quot;Python.rf3.executor&quot;: &quot;Run&quot;,
+    &quot;Python.rf7.executor&quot;: &quot;Run&quot;,
+    &quot;Python.teste.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenDjangoStructureViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/BCC/CD/cd_nba&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;terminal&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  }
+}</component>
+  <component name="RecentsManager">
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="D:\BCC\CD\cd_nba\reports\html\parte1" />
+      <recent name="D:\BCC\CD\cd_nba\reports\arquivos_csv\parte1" />
+      <recent name="D:\BCC\CD\cd_nba\reports\imagens\parte1" />
+    </key>
+  </component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-jdk-9823dce3aa75-125ca727e0f0-intellij.indexing.shared.core-IU-243.23654.189" />
+        <option value="bundled-js-predefined-d6986cc7102b-822845ee3bb5-JavaScript-IU-243.23654.189" />
+      </set>
+    </attachedChunks>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="73705b0c-ca9f-453e-ada2-da743a49b3ab" name="Changes" comment="" />
+      <created>1737079108210</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1737079108210</updated>
+      <workItem from="1737079109567" duration="13687000" />
+      <workItem from="1737093911860" duration="2278000" />
+      <workItem from="1737166165232" duration="29615000" />
+      <workItem from="1737222424699" duration="4996000" />
+      <workItem from="1737227935595" duration="11054000" />
+      <workItem from="1737686868728" duration="13047000" />
+      <workItem from="1738114342454" duration="7259000" />
+      <workItem from="1738197963392" duration="7450000" />
+      <workItem from="1738285264336" duration="10499000" />
+      <workItem from="1738299223079" duration="762000" />
+      <workItem from="1738300036678" duration="423000" />
+      <workItem from="1738300483993" duration="238000" />
+      <workItem from="1738629452020" duration="16333000" />
+      <workItem from="1738647024750" duration="5868000" />
+      <workItem from="1738653132287" duration="668000" />
+      <workItem from="1738653838004" duration="274000" />
+      <workItem from="1738676781435" duration="20464000" />
+    </task>
+    <task id="LOCAL-00001" summary="Inclusão de dados sobre o time.">
+      <option name="closed" value="true" />
+      <created>1737096186540</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1737096186540</updated>
+    </task>
+    <task id="LOCAL-00002" summary="Início do refatoramento do código na parte 01. Deixando o Main.py mais legível.">
+      <option name="closed" value="true" />
+      <created>1737195957797</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1737195957797</updated>
+    </task>
+    <task id="LOCAL-00003" summary="Processo até o RF7 realizado e funcional">
+      <option name="closed" value="true" />
+      <created>1737241567162</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1737241567162</updated>
+    </task>
+    <task id="LOCAL-00004" summary="Início do RF8 da parte 1. Gráfico de rede a ser corrigido">
+      <option name="closed" value="true" />
+      <created>1737700041581</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1737700041581</updated>
+    </task>
+    <task id="LOCAL-00005" summary="Tentativa de avançar com o gráfico de radar.">
+      <option name="closed" value="true" />
+      <created>1738123165537</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1738123165538</updated>
+    </task>
+    <task id="LOCAL-00006" summary="Reorganização dos arquivos de saída da parte 1">
+      <option name="closed" value="true" />
+      <created>1738209385870</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1738209385870</updated>
+    </task>
+    <task id="LOCAL-00007" summary="Mudança do kaleido para o orca para geração dos gráficos.">
+      <option name="closed" value="true" />
+      <created>1738676938500</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1738676938501</updated>
+    </task>
+    <task id="LOCAL-00008" summary="Finalização da parte 01 com todos os gráficos gerados.">
+      <option name="closed" value="true" />
+      <created>1738729599688</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1738729599688</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Inclusão de dados sobre o time." />
+    <MESSAGE value="Início do refatoramento do código na parte 01. Deixando o Main.py mais legível." />
+    <MESSAGE value="Processo até o RF7 realizado e funcional" />
+    <MESSAGE value="Início do RF8 da parte 1. Gráfico de rede a ser corrigido" />
+    <MESSAGE value="Tentativa de avançar com o gráfico de radar." />
+    <MESSAGE value="Reorganização dos arquivos de saída da parte 1" />
+    <MESSAGE value="Mudança do kaleido para o orca para geração dos gráficos." />
+    <MESSAGE value="Finalização da parte 01 com todos os gráficos gerados." />
+    <option name="LAST_COMMIT_MESSAGE" value="Finalização da parte 01 com todos os gráficos gerados." />
+  </component>
+  <component name="XSLT-Support.FileAssociations.UIState">
+    <expand />
+    <select />
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/cd_nba$graficos_estatisticas.coverage" NAME="graficos_estatisticas Coverage Results" MODIFIED="1737084132973" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/visualizations" />
+    <SUITE FILE_PATH="coverage/cd_nba$teste.coverage" NAME="teste Coverage Results" MODIFIED="1737083204165" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/cd_nba$parte1_rf4.coverage" NAME="parte1_rf4 Coverage Results" MODIFIED="1737689797593" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/rf" />
+    <SUITE FILE_PATH="coverage/cd_nba$main.coverage" NAME="main Coverage Results" MODIFIED="1738729206564" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/cd_nba$rf1.coverage" NAME="rf1 Coverage Results" MODIFIED="1737186166838" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/rf" />
+    <SUITE FILE_PATH="coverage/cd_nba$basico.coverage" NAME="basico Coverage Results" MODIFIED="1737086239772" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/cd_nba$rf7.coverage" NAME="rf7 Coverage Results" MODIFIED="1737237133260" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/rf" />
+    <SUITE FILE_PATH="coverage/cd_nba$gerarpdf.coverage" NAME="gerarpdf Coverage Results" MODIFIED="1737241225007" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/reports/pdf" />
+    <SUITE FILE_PATH="coverage/cd_nba$rf3.coverage" NAME="rf3 Coverage Results" MODIFIED="1737188296333" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/rf" />
+    <SUITE FILE_PATH="coverage/cd_nba$renomear_arquivos.coverage" NAME="renomear_arquivos Coverage Results" MODIFIED="1737689012257" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/cd_nba$parte1_rf8.coverage" NAME="parte1_rf8 Coverage Results" MODIFIED="1738122040508" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/rf/parte1" />
+    <SUITE FILE_PATH="coverage/cd_nba$parte2_rf10.coverage" NAME="parte2_rf10 Coverage Results" MODIFIED="1738652560179" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/rf/parte2" />
+    <SUITE FILE_PATH="coverage/cd_nba$coleta_dados.coverage" NAME="coleta_dados Coverage Results" MODIFIED="1737227214803" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/data" />
+    <SUITE FILE_PATH="coverage/cd_nba$rf2.coverage" NAME="rf2 Coverage Results" MODIFIED="1737194488971" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/src/rf" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09__Changes_.xml
new file mode 100644
--- /dev/null	(date 1738681855059)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09__Changes_.xml	(date 1738681855059)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_04_02_2025_12_09_[Changes]" date="1738681758182" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_04_02_2025_12_09_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 04/02/2025 12:09 [Changes]" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49__Changes_.xml
new file mode 100644
--- /dev/null	(date 1738285724933)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49__Changes_.xml	(date 1738285724933)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_23_01_2025_23_49_[Changes]" date="1737686943505" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 23/01/2025 23:49 [Changes]" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1737686943488)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_23_01_2025_23_49_[Changes]/shelved.patch	(date 1737686943488)
@@ -0,0 +1,428 @@
+Index: src/main_old.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main_old.py b/src/main_old.py
+new file mode 100644
+--- /dev/null	(date 1737184269297)
++++ b/src/main_old.py	(date 1737184269297)
+@@ -0,0 +1,417 @@
++from src.data.extracao_dados import extrair_dados_time, extrair_dados_jogadores, preencher_placares_faltantes
++from src.data.limpeza_transformacao import (
++    verificar_dados_ausentes,
++    remover_colunas_irrelevantes,
++    normalizar_valores,
++    tratar_outliers,
++    remover_duplicatas,
++    separar_treino_teste,
++)
++import pandas as pd
++import os
++import matplotlib.pyplot as plt
++import seaborn as sns
++import plotly.express as px
++
++# Configurações do projeto
++time_nome = "Brooklyn Nets"
++jogadores_ids = [1629680, 201609, 1627742]  # Cam Thomas, Dennis Schroder, Cameron Johnson
++
++temporadas = ["2023-24", "2024-25"]
++
++# Criar pasta para salvar os relatórios e gráficos
++output_dir = "reports/arquivos_csv"
++graph_dir = "reports/graficos_html"
++os.makedirs(output_dir, exist_ok=True)
++os.makedirs(graph_dir, exist_ok=True)
++
++# Funções para os Requisitos Funcionais (RFs)
++def salvar_tabela_html(leste, param, param1):
++    pass
++
++def listar_times_conferencia():
++    """RF1: Listar todos os times da NBA agrupados por conferência."""
++    from nba_api.stats.static import teams
++    all_teams = pd.DataFrame(teams.get_teams())
++
++    # Mapeamento manual de conferências
++    leste_teams = [
++        "Atlanta Hawks", "Boston Celtics", "Brooklyn Nets", "Charlotte Hornets",
++        "Chicago Bulls", "Cleveland Cavaliers", "Detroit Pistons", "Indiana Pacers",
++        "Miami Heat", "Milwaukee Bucks", "New York Knicks", "Orlando Magic",
++        "Philadelphia 76ers", "Toronto Raptors", "Washington Wizards"
++    ]
++
++    oeste_teams = [
++        "Dallas Mavericks", "Denver Nuggets", "Golden State Warriors", "Houston Rockets",
++        "Los Angeles Clippers", "Los Angeles Lakers", "Memphis Grizzlies", "Minnesota Timberwolves",
++        "New Orleans Pelicans", "Oklahoma City Thunder", "Phoenix Suns", "Portland Trail Blazers",
++        "Sacramento Kings", "San Antonio Spurs", "Utah Jazz"
++    ]
++
++    # Adicionar coluna de conferência
++    all_teams["conference"] = all_teams["full_name"].apply(
++        lambda x: "East" if x in leste_teams else "West" if x in oeste_teams else "Unknown"
++    )
++
++    # Filtrar por conferência
++    leste = all_teams[all_teams["conference"] == "East"]
++    oeste = all_teams[all_teams["conference"] == "West"]
++
++    # Salvar tabelas em HTML
++    os.makedirs(graph_dir, exist_ok=True)  # Garantir que o diretório existe
++
++    leste.to_html(os.path.join(graph_dir, "tabela_times_leste.html"), index=False)
++    oeste.to_html(os.path.join(graph_dir, "tabela_times_oeste.html"), index=False)
++
++    print(f"Tabelas salvas em: {graph_dir}")
++    return leste, oeste
++
++def listar_times_conferencia_unica():
++    """RF1: Criar uma tabela única com os times da NBA e suas conferências."""
++    from nba_api.stats.static import teams
++    all_teams = pd.DataFrame(teams.get_teams())
++
++    # Mapeamento manual de conferências
++    leste_teams = [
++        "Atlanta Hawks", "Boston Celtics", "Brooklyn Nets", "Charlotte Hornets",
++        "Chicago Bulls", "Cleveland Cavaliers", "Detroit Pistons", "Indiana Pacers",
++        "Miami Heat", "Milwaukee Bucks", "New York Knicks", "Orlando Magic",
++        "Philadelphia 76ers", "Toronto Raptors", "Washington Wizards"
++    ]
++
++    oeste_teams = [
++        "Dallas Mavericks", "Denver Nuggets", "Golden State Warriors", "Houston Rockets",
++        "Los Angeles Clippers", "Los Angeles Lakers", "Memphis Grizzlies", "Minnesota Timberwolves",
++        "New Orleans Pelicans", "Oklahoma City Thunder", "Phoenix Suns", "Portland Trail Blazers",
++        "Sacramento Kings", "San Antonio Spurs", "Utah Jazz"
++    ]
++
++    # Adicionar coluna de conferência
++    all_teams["conference"] = all_teams["full_name"].apply(
++        lambda x: "East" if x in leste_teams else "West" if x in oeste_teams else "Unknown"
++    )
++
++    # Garantir que o diretório exista
++    os.makedirs(graph_dir, exist_ok=True)
++
++    # Caminho para salvar a tabela
++    tabela_unica_path = os.path.abspath(os.path.join(graph_dir, "tabela_times_unica.html"))
++
++    print(f"Salvando tabela em: {tabela_unica_path}")
++
++    try:
++        # Salvar a tabela como HTML
++        all_teams.to_html(tabela_unica_path, index=False)
++    except Exception as e:
++        print(f"Erro ao salvar a tabela única: {e}")
++
++    # Confirmar existência do arquivo após salvamento
++    if os.path.exists(tabela_unica_path):
++        print(f"O arquivo foi salvo corretamente em: {tabela_unica_path}")
++    else:
++        print(f"Arquivo não encontrado! Verifique as permissões ou o caminho: {tabela_unica_path}")
++
++    # Retornar a tabela
++    return all_teams
++
++def apresentar_classificacao_atual():
++    """RF2: Apresentar a classificação atual dos times agrupados por conferência."""
++    from nba_api.stats.endpoints import leaguestandings
++
++    # Obter a classificação atual
++    standings = leaguestandings.LeagueStandings(season=temporadas[-1]).get_data_frames()[0]
++
++    # Criar o nome completo do time para mapeamento
++    standings["FullTeamName"] = standings["TeamCity"] + " " + standings["TeamName"]
++
++    # Diagnóstico: Exibir os nomes completos gerados
++    print("Nomes completos dos times:", standings["FullTeamName"].unique())
++
++    # Mapeamento manual para conferências
++    leste_teams = [
++        "Atlanta Hawks", "Boston Celtics", "Brooklyn Nets", "Charlotte Hornets",
++        "Chicago Bulls", "Cleveland Cavaliers", "Detroit Pistons", "Indiana Pacers",
++        "Miami Heat", "Milwaukee Bucks", "New York Knicks", "Orlando Magic",
++        "Philadelphia 76ers", "Toronto Raptors", "Washington Wizards"
++    ]
++
++    oeste_teams = [
++        "Dallas Mavericks", "Denver Nuggets", "Golden State Warriors", "Houston Rockets",
++        "Los Angeles Clippers", "Los Angeles Lakers", "Memphis Grizzlies", "Minnesota Timberwolves",
++        "New Orleans Pelicans", "Oklahoma City Thunder", "Phoenix Suns", "Portland Trail Blazers",
++        "Sacramento Kings", "San Antonio Spurs", "Utah Jazz"
++    ]
++
++    # Adicionar conferência manualmente
++    standings["Conference"] = standings["FullTeamName"].apply(
++        lambda x: "Leste" if x in leste_teams else "Oeste" if x in oeste_teams else "Desconhecido"
++    )
++
++    # Diagnóstico: Verificar os dados após mapeamento
++    print("Times classificados como Leste:")
++    print(standings[standings["Conference"] == "Leste"])
++    print("Times classificados como Oeste:")
++    print(standings[standings["Conference"] == "Oeste"])
++    print("Times classificados como Desconhecido:")
++    print(standings[standings["Conference"] == "Desconhecido"])
++
++    # Dividir por conferência
++    leste = standings[standings["Conference"] == "Leste"]
++    oeste = standings[standings["Conference"] == "Oeste"]
++
++    # Garantir que o diretório exista
++    os.makedirs(graph_dir, exist_ok=True)
++
++    # Salvar as tabelas
++    leste.to_html(os.path.join(graph_dir, "classificacao_conferencia_leste.html"), index=False)
++    oeste.to_html(os.path.join(graph_dir, "classificacao_conferencia_oeste.html"), index=False)
++
++    print(f"Tabelas salvas em: {graph_dir}")
++
++    return leste, oeste
++
++def apresentar_classificacao_atual_unificada():
++    """RF2: Apresentar a classificação atual dos times em uma única tabela agrupados por conferência e classificação."""
++    from nba_api.stats.endpoints import leaguestandings
++
++    # Obter a classificação atual
++    standings = leaguestandings.LeagueStandings(season=temporadas[-1]).get_data_frames()[0]
++
++    # Criar o nome completo do time para mapeamento
++    standings["FullTeamName"] = standings["TeamCity"] + " " + standings["TeamName"]
++
++    # Diagnóstico: Verificar LeagueRank
++    print("Valores únicos em LeagueRank:", standings["LeagueRank"].unique())
++
++    # Corrigir LeagueRank manualmente, se necessário
++    if standings["LeagueRank"].isna().any():
++        print("LeagueRank não está preenchido. Calculando classificação com base em WinPCT.")
++        standings = standings.sort_values(by="WinPCT", ascending=False).reset_index(drop=True)
++        standings["LeagueRank"] = standings.index + 1
++
++    # Mapeamento manual para conferências
++    leste_teams = [
++        "Atlanta Hawks", "Boston Celtics", "Brooklyn Nets", "Charlotte Hornets",
++        "Chicago Bulls", "Cleveland Cavaliers", "Detroit Pistons", "Indiana Pacers",
++        "Miami Heat", "Milwaukee Bucks", "New York Knicks", "Orlando Magic",
++        "Philadelphia 76ers", "Toronto Raptors", "Washington Wizards"
++    ]
++
++    oeste_teams = [
++        "Dallas Mavericks", "Denver Nuggets", "Golden State Warriors", "Houston Rockets",
++        "Los Angeles Clippers", "Los Angeles Lakers", "Memphis Grizzlies", "Minnesota Timberwolves",
++        "New Orleans Pelicans", "Oklahoma City Thunder", "Phoenix Suns", "Portland Trail Blazers",
++        "Sacramento Kings", "San Antonio Spurs", "Utah Jazz"
++    ]
++
++    # Adicionar conferência manualmente
++    standings["Conference"] = standings["FullTeamName"].apply(
++        lambda x: "Leste" if x in leste_teams else "Oeste" if x in oeste_teams else "Desconhecido"
++    )
++
++    # Diagnóstico: Verificar os dados após mapeamento
++    print("Times classificados como Leste:")
++    print(standings[standings["Conference"] == "Leste"])
++    print("Times classificados como Oeste:")
++    print(standings[standings["Conference"] == "Oeste"])
++
++    # Ordenar por conferência e LeagueRank
++    standings = standings.sort_values(by=["Conference", "LeagueRank"]).reset_index(drop=True)
++
++    # Garantir que o diretório exista
++    os.makedirs(graph_dir, exist_ok=True)
++
++    # Caminho para salvar a tabela unificada
++    tabela_unificada_path = os.path.join(graph_dir, "classificacao_unificada.html")
++
++    # Salvar como HTML
++    standings.to_html(tabela_unificada_path, index=False)
++
++    print(f"Tabela unificada salva em: {tabela_unificada_path}")
++
++    return standings
++
++def calcular_vitorias_derrotas(df_times):
++    """
++    RF3: Calcular vitórias e derrotas do time escolhido e apresentá-las em uma tabela.
++
++    Args:
++        df_times (pd.DataFrame): Dados dos jogos do time.
++
++    Returns:
++        pd.DataFrame: DataFrame contendo os totais de vitórias e derrotas separadas por mandante/visitante.
++    """
++    # Filtrar partidas jogadas em casa e fora de casa
++    mandante = df_times[df_times["MATCHUP"].str.contains("vs.")]
++    visitante = df_times[df_times["MATCHUP"].str.contains("@")]
++
++    # Calcular totais
++    dados_vitorias_derrotas = {
++        "Total de Vitórias": len(df_times[df_times["WL"] == "W"]),
++        "Vitórias em Casa": len(mandante[mandante["WL"] == "W"]),
++        "Vitórias Fora de Casa": len(visitante[visitante["WL"] == "W"]),
++        "Total de Derrotas": len(df_times[df_times["WL"] == "L"]),
++        "Derrotas em Casa": len(mandante[mandante["WL"] == "L"]),
++        "Derrotas Fora de Casa": len(visitante[visitante["WL"] == "L"]),
++    }
++
++    # Converter os resultados para um DataFrame
++    df_resultados = pd.DataFrame([dados_vitorias_derrotas])
++
++    # Garantir que o diretório exista
++    os.makedirs(graph_dir, exist_ok=True)
++
++    # Salvar como HTML
++    tabela_path = os.path.join(graph_dir, "vitorias_derrotas.html")
++    df_resultados.to_html(tabela_path, index=False)
++
++    print(f"Tabela de vitórias e derrotas salva em: {tabela_path}")
++
++    return df_resultados
++
++def calcular_totais_e_derrotas(df_times_orig):
++    """
++    Calcula os totais de pontos, assistências, rebotes, cestas de 3 pontos convertidas,
++    derrotas em casa e derrotas fora de casa.
++
++    Args:
++        df_times_orig (pd.DataFrame): DataFrame original com dados não normalizados.
++
++    Returns:
++        pd.DataFrame: DataFrame com os totais solicitados.
++    """
++    # Calcular os totais
++    totais = {
++        "Total de Pontos por Jogo": df_times_orig["PTS"].sum(),
++        "Total de Assistências por Jogo": df_times_orig["AST"].sum(),
++        "Total de Rebotes por Jogo": df_times_orig["REB"].sum(),
++        "Total de Cestas de 3 Pontos Convertidas": df_times_orig["FG3M"].sum(),
++        "Derrotas em Casa": len(df_times_orig[(df_times_orig["WL"] == "L") & (df_times_orig["MATCHUP"].str.contains("vs."))]),
++        "Derrotas Fora de Casa": len(df_times_orig[(df_times_orig["WL"] == "L") & (df_times_orig["MATCHUP"].str.contains("@"))]),
++    }
++
++    # Retornar como DataFrame
++    return pd.DataFrame([totais])
++
++def calcular_detalhes_rebotes(df_times):
++    """RF5: Divisão detalhada de rebotes, cestas e lances livres."""
++    colunas_rebotes = ["REB", "OREB", "DREB", "FGM", "FG3M", "FTM"]  # FGM substitui FG2M
++    colunas_disponiveis = [col for col in colunas_rebotes if col in df_times.columns]
++
++    if not colunas_disponiveis:
++        raise ValueError("Nenhuma coluna relevante para rebotes e cestas foi encontrada no DataFrame.")
++
++    return df_times[colunas_disponiveis].agg("sum").to_dict()
++
++def calcular_performance_defensiva(df_times):
++    """RF6: Performance defensiva do time."""
++    colunas_defensivas = ["STL", "DREB", "BLK", "TO", "PF"]  # Colunas esperadas
++    colunas_disponiveis = [col for col in colunas_defensivas if col in df_times.columns]
++
++    if not colunas_disponiveis:
++        raise ValueError("Nenhuma coluna relevante para performance defensiva foi encontrada no DataFrame.")
++
++    return df_times[colunas_disponiveis].agg("sum").to_dict()
++
++def listar_jogos_time(df_times):
++    """RF7: Listar jogos do time com detalhes."""
++    return df_times[["GAME_DATE", "MATCHUP", "WL", "PTS"]]
++
++def gerar_graficos(df_times):
++    """RF8: Gerar gráficos de desempenho do time."""
++    # Gráfico de barras empilhado: vitórias e derrotas (Matplotlib)
++    plt.figure(figsize=(10, 6))
++    vit_der = df_times["WL"].value_counts()
++    vit_der.plot(kind="bar", color=["green", "red"])
++    plt.title("Vitórias e Derrotas")
++    plt.savefig(os.path.join(graph_dir, "vitorias_derrotas.png"))  # Salvar como PNG
++    plt.close()
++
++    # Gráfico interativo de pontos por jogo (Plotly)
++    fig = px.histogram(df_times, x="PTS", nbins=10, title="Distribuição de Pontos por Jogo")
++    fig.write_html(os.path.join(graph_dir, "distribuicao_pontos.html"))
++
++    print("Gráficos gerados com sucesso.")
++
++def salvar_todos_dados(df_dict):
++    """RF9: Salvar todos os dados gerados."""
++    for name, df in df_dict.items():
++        df.to_csv(os.path.join(output_dir, f"{name}.csv"), index=False)
++
++# Execução do pipeline
++print("Extraindo dados do time...")
++dados_times = [extrair_dados_time(time_nome, temporada) for temporada in temporadas]
++df_times = pd.concat(dados_times, ignore_index=True)
++
++print("Extraindo dados dos jogadores...")
++df_jogadores = extrair_dados_jogadores(jogadores_ids)
++
++print("Preenchendo placares faltantes...")
++df_placares = preencher_placares_faltantes("2024-01-01", "2024-01-31")
++
++print("Limpando e transformando dados...")
++df_times = verificar_dados_ausentes(df_times)
++df_jogadores = verificar_dados_ausentes(df_jogadores)
++colunas_irrelevantes = ["SALARY", "TEAM_ABBREVIATION"]
++df_times = remover_colunas_irrelevantes(df_times, colunas_irrelevantes)
++df_jogadores = remover_colunas_irrelevantes(df_jogadores, colunas_irrelevantes)
++df_times = tratar_outliers(df_times, ["PTS"])
++df_times = remover_duplicatas(df_times)
++df_times_orig = df_times.copy()
++df_times = normalizar_valores(df_times, ["PTS"])
++
++print("Executando RFs adicionais...")
++# RF1: Listar times por conferência
++leste, oeste = listar_times_conferencia()
++unica = listar_times_conferencia_unica()
++
++# RF2: Classificação atual
++leste, oeste = apresentar_classificacao_atual()
++classificacao_unificada = apresentar_classificacao_atual_unificada()
++
++
++# RF3: Vitórias e derrotas
++dados_vitorias_derrotas = calcular_vitorias_derrotas(df_times)
++print("Calculando vitórias e derrotas...")
++df_vitorias_derrotas = calcular_vitorias_derrotas(df_times)
++
++# Salvar o DataFrame no formato CSV para análises futuras
++df_vitorias_derrotas.to_csv(os.path.join(output_dir, "vitorias_derrotas.csv"), index=False)
++
++print("Calculando totais e derrotas do Brooklyn Nets...")
++
++# RF4: Calcular totais e derrotas do Brooklyn Nets
++df_totais_e_derrotas = calcular_totais_e_derrotas(df_times_orig)
++
++# Salvar a tabela em HTML
++totais_e_derrotas_path = os.path.join(graph_dir, "totais_e_derrotas.html")
++df_totais_e_derrotas.to_html(totais_e_derrotas_path, index=False)
++print(f"Tabela de totais e derrotas salva em: {totais_e_derrotas_path}")
++
++# RF5: Detalhes de rebotes e cestas
++detalhes_rebotes = calcular_detalhes_rebotes(df_times)
++
++# RF6: Performance defensiva
++performance_defensiva = calcular_performance_defensiva(df_times)
++
++# RF7: Listar jogos
++df_jogos = listar_jogos_time(df_times)
++
++# Salvar relatórios gerados
++print("Salvando dados gerados...")
++salvar_todos_dados({
++    "times_leste": leste,
++    "times_oeste": oeste,
++    "classificacao_unificada": classificacao_unificada,
++    "totais_e_derrotas": df_totais_e_derrotas,
++    #"totais_time": pd.DataFrame([calcular_totais_time(df_times)]),
++    "detalhes_rebotes": pd.DataFrame([calcular_detalhes_rebotes(df_times)]),
++    "performance_defensiva": pd.DataFrame([calcular_performance_defensiva(df_times)]),
++    "jogos_time": listar_jogos_time(df_times),
++})
++
++print("Gerando gráficos...")
++gerar_graficos(df_times)
++
++print("Análise concluída. Relatórios e gráficos gerados.")
+\ No newline at end of file
